{"ast":null,"code":"var parse = require('./parse'),\n    render = require('dom-serializer');\n/**\r\n * HTML Tags\r\n */\n\n\nvar tags = {\n  tag: true,\n  script: true,\n  style: true\n};\n/**\r\n * Check if the DOM element is a tag\r\n *\r\n * isTag(type) includes <script> and <style> tags\r\n */\n\nexports.isTag = function (type) {\n  if (type.type) type = type.type;\n  return tags[type] || false;\n};\n/**\r\n * Convert a string to camel case notation.\r\n * @param  {String} str String to be converted.\r\n * @return {String}     String in camel case notation.\r\n */\n\n\nexports.camelCase = function (str) {\n  return str.replace(/[_.-](\\w|$)/g, function (_, x) {\n    return x.toUpperCase();\n  });\n};\n/**\r\n * Convert a string from camel case to \"CSS case\", where word boundaries are\r\n * described by hyphens (\"-\") and all characters are lower-case.\r\n * @param  {String} str String to be converted.\r\n * @return {string}     String in \"CSS case\".\r\n */\n\n\nexports.cssCase = function (str) {\n  return str.replace(/[A-Z]/g, '-$&').toLowerCase();\n};\n/**\r\n * Iterate over each DOM element without creating intermediary Cheerio instances.\r\n *\r\n * This is indented for use internally to avoid otherwise unnecessary memory pressure introduced\r\n * by _make.\r\n */\n\n\nexports.domEach = function (cheerio, fn) {\n  var i = 0,\n      len = cheerio.length;\n\n  while (i < len && fn.call(cheerio, i, cheerio[i]) !== false) {\n    ++i;\n  }\n\n  return cheerio;\n};\n/**\r\n * Create a deep copy of the given DOM structure by first rendering it to a\r\n * string and then parsing the resultant markup.\r\n *\r\n * @argument {Object} dom - The htmlparser2-compliant DOM structure\r\n * @argument {Object} options - The parsing/rendering options\r\n */\n\n\nexports.cloneDom = function (dom, options) {\n  return parse(render(dom, options), options).children;\n};\n/*\r\n * A simple way to check for HTML strings or ID strings\r\n */\n\n\nvar quickExpr = /^(?:[^#<]*(<[\\w\\W]+>)[^>]*$|#([\\w\\-]*)$)/;\n/*\r\n * Check if string is HTML\r\n */\n\nexports.isHtml = function (str) {\n  // Faster than running regex, if str starts with `<` and ends with `>`, assume it's HTML\n  if (str.charAt(0) === '<' && str.charAt(str.length - 1) === '>' && str.length >= 3) return true; // Run the regex\n\n  var match = quickExpr.exec(str);\n  return !!(match && match[1]);\n};","map":null,"metadata":{},"sourceType":"script"}