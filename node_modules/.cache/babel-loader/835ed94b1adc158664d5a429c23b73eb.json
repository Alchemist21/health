{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar query_string_1 = __importDefault(require(\"query-string\")); // @ts-ignore: Could not find a declaration file for module\n\n\nvar jsontokens_1 = require(\"jsontokens\");\n\nvar utils_1 = require(\"../utils\");\n\nvar logger_1 = require(\"../logger\");\n/**\r\n * Retrieves the authentication request from the query string\r\n * @return {String|null} the authentication request or `null` if\r\n * the query string parameter `authRequest` is not found\r\n * @private\r\n */\n\n\nfunction getAuthRequestFromURL() {\n  utils_1.checkWindowAPI('getAuthRequestFromURL', 'location');\n  var queryDict = query_string_1.default.parse(window.location.search);\n\n  if (queryDict.authRequest) {\n    return queryDict.authRequest.split(\"\".concat(utils_1.BLOCKSTACK_HANDLER, \":\")).join('');\n  } else {\n    return null;\n  }\n}\n\nexports.getAuthRequestFromURL = getAuthRequestFromURL;\n/**\r\n * Fetches the contents of the manifest file specified in the authentication request\r\n *\r\n * @param  {String} authRequest encoded and signed authentication request\r\n * @return {Promise<Object|String>} Returns a `Promise` that resolves to the JSON\r\n * object manifest file unless there's an error in which case rejects with an error\r\n * message.\r\n * @private\r\n */\n\nfunction fetchAppManifest(authRequest) {\n  return new Promise(function (resolve, reject) {\n    if (!authRequest) {\n      reject('Invalid auth request');\n    } else {\n      var payload = jsontokens_1.decodeToken(authRequest).payload;\n      var manifestURI = payload.manifest_uri;\n\n      try {\n        logger_1.Logger.debug(\"Fetching manifest from \".concat(manifestURI));\n        fetch(manifestURI).then(function (response) {\n          return response.text();\n        }).then(function (responseText) {\n          return JSON.parse(responseText);\n        }).then(function (responseJSON) {\n          resolve(responseJSON);\n        }).catch(function (e) {\n          logger_1.Logger.debug(e.stack);\n          reject('Could not fetch manifest.json');\n        });\n      } catch (e) {\n        logger_1.Logger.debug(e.stack);\n        reject('Could not fetch manifest.json');\n      }\n    }\n  });\n}\n\nexports.fetchAppManifest = fetchAppManifest;\n/**\r\n * Redirect the user's browser to the app using the `redirect_uri`\r\n * specified in the authentication request, passing the authentication\r\n * response token as a query parameter.\r\n *\r\n * @param {String} authRequest  encoded and signed authentication request token\r\n * @param {String} authResponse encoded and signed authentication response token\r\n * @return {void}\r\n * @throws {Error} if there is no redirect uri\r\n * @private\r\n */\n\nfunction redirectUserToApp(authRequest, authResponse) {\n  var payload = jsontokens_1.decodeToken(authRequest).payload;\n  var redirectURI = payload.redirect_uri;\n  logger_1.Logger.debug(redirectURI);\n\n  if (redirectURI) {\n    redirectURI = utils_1.updateQueryStringParameter(redirectURI, 'authResponse', authResponse);\n  } else {\n    throw new Error('Invalid redirect URI');\n  }\n\n  utils_1.checkWindowAPI('redirectUserToApp', 'location');\n  window.location.href = redirectURI;\n}\n\nexports.redirectUserToApp = redirectUserToApp;","map":null,"metadata":{},"sourceType":"script"}