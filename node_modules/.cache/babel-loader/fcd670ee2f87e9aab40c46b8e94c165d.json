{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils_1 = require(\"../utils\");\n\nvar logger_1 = require(\"../logger\");\n/**\n * Detects if the native auth-browser is installed and is successfully\n * launched via a custom protocol URI.\n * @param {String} authRequest\n * The encoded authRequest to be used as a query param in the custom URI.\n * @param {String} successCallback\n * The callback that is invoked when the protocol handler was detected.\n * @param {String} failCallback\n * The callback that is invoked when the protocol handler was not detected.\n * @return {void}\n */\n\n\nfunction launchCustomProtocol(authRequest, successCallback, failCallback) {\n  // Create a unique ID used for this protocol detection attempt.\n  var echoReplyID = Math.random().toString(36).substr(2, 9);\n  var echoReplyKeyPrefix = 'echo-reply-';\n  var echoReplyKey = \"\".concat(echoReplyKeyPrefix).concat(echoReplyID);\n  var apis = ['localStorage', 'document', 'setTimeout', 'clearTimeout', 'addEventListener', 'removeEventListener'];\n  apis.forEach(function (windowAPI) {\n    return utils_1.checkWindowAPI('detectProtocolLaunch', windowAPI);\n  }); // Use localStorage as a reliable cross-window communication method.\n  // Create the storage entry to signal a protocol detection attempt for the\n  // next browser window to check.\n\n  window.localStorage.setItem(echoReplyKey, Date.now().toString());\n\n  var cleanUpLocalStorage = function cleanUpLocalStorage() {\n    try {\n      window.localStorage.removeItem(echoReplyKey); // Also clear out any stale echo-reply keys older than 1 hour.\n\n      for (var i = 0; i < window.localStorage.length; i++) {\n        var storageKey = window.localStorage.key(i);\n\n        if (storageKey && storageKey.startsWith(echoReplyKeyPrefix)) {\n          var storageValue = window.localStorage.getItem(storageKey);\n\n          if (storageValue === 'success' || Date.now() - parseInt(storageValue, 10) > 3600000) {\n            window.localStorage.removeItem(storageKey);\n          }\n        }\n      }\n    } catch (err) {\n      logger_1.Logger.error('Exception cleaning up echo-reply entries in localStorage');\n      logger_1.Logger.error(err);\n    }\n  };\n\n  var detectionTimeout = 1000;\n  var redirectToWebAuthTimer = 0;\n\n  var cancelWebAuthRedirectTimer = function cancelWebAuthRedirectTimer() {\n    if (redirectToWebAuthTimer) {\n      window.clearTimeout(redirectToWebAuthTimer);\n      redirectToWebAuthTimer = 0;\n    }\n  };\n\n  var startWebAuthRedirectTimer = function startWebAuthRedirectTimer() {\n    var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : detectionTimeout;\n    cancelWebAuthRedirectTimer();\n    redirectToWebAuthTimer = window.setTimeout(function () {\n      if (redirectToWebAuthTimer) {\n        cancelWebAuthRedirectTimer();\n        var nextFunc;\n\n        if (window.localStorage.getItem(echoReplyKey) === 'success') {\n          logger_1.Logger.info('Protocol echo reply detected.');\n          nextFunc = successCallback;\n        } else {\n          logger_1.Logger.info('Protocol handler not detected.');\n          nextFunc = failCallback;\n        }\n\n        failCallback = function failCallback() {};\n\n        successCallback = function successCallback() {};\n\n        cleanUpLocalStorage(); // Briefly wait since localStorage changes can \n        // sometimes be ignored when immediately redirected.\n\n        setTimeout(function () {\n          return nextFunc();\n        }, 100);\n      }\n    }, timeout);\n  };\n\n  startWebAuthRedirectTimer();\n  var inputPromptTracker = window.document.createElement('input');\n  inputPromptTracker.type = 'text';\n  var inputStyle = inputPromptTracker.style; // Prevent this element from inherited any css.\n\n  inputStyle.all = 'initial'; // Setting display=none on an element prevents them from being focused/blurred.\n  // So hide the element using other properties..\n\n  inputStyle.opacity = '0';\n  inputStyle.filter = 'alpha(opacity=0)';\n  inputStyle.height = '0';\n  inputStyle.width = '0'; // If the the focus of a page element is immediately changed then this likely indicates \n  // the protocol handler is installed, and the browser is prompting the user if they want \n  // to open the application. \n\n  var inputBlurredFunc = function inputBlurredFunc() {\n    // Use a timeout of 100ms to ignore instant toggles between blur and focus.\n    // Browsers often perform an instant blur & focus when the protocol handler is working\n    // but not showing any browser prompts, so we want to ignore those instances.\n    var isRefocused = false;\n    inputPromptTracker.addEventListener('focus', function () {\n      isRefocused = true;\n    }, {\n      once: true,\n      capture: true\n    });\n    setTimeout(function () {\n      if (redirectToWebAuthTimer && !isRefocused) {\n        logger_1.Logger.info('Detected possible browser prompt for opening the protocol handler app.');\n        window.clearTimeout(redirectToWebAuthTimer);\n        inputPromptTracker.addEventListener('focus', function () {\n          if (redirectToWebAuthTimer) {\n            logger_1.Logger.info('Possible browser prompt closed, restarting auth redirect timeout.');\n            startWebAuthRedirectTimer();\n          }\n        }, {\n          once: true,\n          capture: true\n        });\n      }\n    }, 100);\n  };\n\n  inputPromptTracker.addEventListener('blur', inputBlurredFunc, {\n    once: true,\n    capture: true\n  });\n  setTimeout(function () {\n    return inputPromptTracker.removeEventListener('blur', inputBlurredFunc);\n  }, 200);\n  window.document.body.appendChild(inputPromptTracker);\n  inputPromptTracker.focus(); // Detect if document.visibility is immediately changed which is a strong \n  // indication that the protocol handler is working. We don't know for sure and \n  // can't predict future browser changes, so only increase the redirect timeout.\n  // This reduces the probability of a false-negative (where local auth works, but \n  // the original page was redirect to web auth because something took too long),\n\n  var pageVisibilityChanged = function pageVisibilityChanged() {\n    if (window.document.hidden && redirectToWebAuthTimer) {\n      logger_1.Logger.info('Detected immediate page visibility change (protocol handler probably working).');\n      startWebAuthRedirectTimer(3000);\n    }\n  };\n\n  window.document.addEventListener('visibilitychange', pageVisibilityChanged, {\n    once: true,\n    capture: true\n  });\n  setTimeout(function () {\n    return window.document.removeEventListener('visibilitychange', pageVisibilityChanged);\n  }, 500); // Listen for the custom protocol echo reply via localStorage update event.\n\n  window.addEventListener('storage', function replyEventListener(event) {\n    if (event.key === echoReplyKey && window.localStorage.getItem(echoReplyKey) === 'success') {\n      // Custom protocol worked, cancel the web auth redirect timer.\n      cancelWebAuthRedirectTimer();\n      inputPromptTracker.removeEventListener('blur', inputBlurredFunc);\n      logger_1.Logger.info('Protocol echo reply detected from localStorage event.'); // Clean up event listener and localStorage.\n\n      window.removeEventListener('storage', replyEventListener);\n      var nextFunc = successCallback;\n\n      successCallback = function successCallback() {};\n\n      failCallback = function failCallback() {};\n\n      cleanUpLocalStorage(); // Briefly wait since localStorage changes can sometimes \n      // be ignored when immediately redirected.\n\n      setTimeout(function () {\n        return nextFunc();\n      }, 100);\n    }\n  }, false); // Use iframe technique for launching the protocol URI rather than setting `window.location`.\n  // This method prevents browsers like Safari, Opera, Firefox from showing error prompts\n  // about unknown protocol handler when app is not installed, and avoids an empty\n  // browser tab when the app is installed. \n\n  logger_1.Logger.info('Attempting protocol launch via iframe injection.');\n  var locationSrc = \"\".concat(utils_1.BLOCKSTACK_HANDLER, \":\").concat(authRequest, \"&echo=\").concat(echoReplyID);\n  var iframe = window.document.createElement('iframe');\n  var iframeStyle = iframe.style;\n  iframeStyle.all = 'initial';\n  iframeStyle.display = 'none';\n  iframe.src = locationSrc;\n  window.document.body.appendChild(iframe);\n}\n\nexports.launchCustomProtocol = launchCustomProtocol;","map":null,"metadata":{},"sourceType":"script"}