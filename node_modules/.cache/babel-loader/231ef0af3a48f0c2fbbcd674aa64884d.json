{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar profileZoneFiles_1 = require(\"./profileZoneFiles\");\n\nvar config_1 = require(\"../config\");\n/**\r\n * Look up a user profile by blockstack ID\r\n *\r\n * @param {string} username - The Blockstack ID of the profile to look up\r\n * @param {string} [zoneFileLookupURL=null] - The URL\r\n * to use for zonefile lookup. If falsey, lookupProfile will use the\r\n * blockstack.js getNameInfo function.\r\n * @returns {Promise} that resolves to a profile object\r\n */\n\n\nfunction lookupProfile(username, zoneFileLookupURL) {\n  if (!username) {\n    return Promise.reject();\n  }\n\n  var lookupPromise;\n\n  if (zoneFileLookupURL) {\n    var url = \"\".concat(zoneFileLookupURL.replace(/\\/$/, ''), \"/\").concat(username);\n    lookupPromise = fetch(url).then(function (response) {\n      return response.json();\n    });\n  } else {\n    lookupPromise = config_1.config.network.getNameInfo(username);\n  }\n\n  return lookupPromise.then(function (responseJSON) {\n    if (responseJSON.hasOwnProperty('zonefile') && responseJSON.hasOwnProperty('address')) {\n      return profileZoneFiles_1.resolveZoneFileToProfile(responseJSON.zonefile, responseJSON.address);\n    } else {\n      throw new Error('Invalid zonefile lookup response: did not contain `address`' + ' or `zonefile` field');\n    }\n  });\n}\n\nexports.lookupProfile = lookupProfile;","map":null,"metadata":{},"sourceType":"script"}