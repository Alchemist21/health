{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Me\\\\Desktop\\\\hackfest2019\\\\healthr\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Me\\\\Desktop\\\\hackfest2019\\\\healthr\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Me\\\\Desktop\\\\hackfest2019\\\\healthr\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar appConfig_1 = require(\"./appConfig\");\n\nvar sessionStore_1 = require(\"./sessionStore\");\n\nvar authApp = __importStar(require(\"./authApp\"));\n\nvar authMessages = __importStar(require(\"./authMessages\"));\n\nvar storage = __importStar(require(\"../storage\"));\n\nvar utils_1 = require(\"../utils\");\n\nvar errors_1 = require(\"../errors\");\n\nvar logger_1 = require(\"../logger\");\n\nvar hub_1 = require(\"../storage/hub\");\n\nvar authConstants_1 = require(\"./authConstants\");\n/**\r\n * Represents an instance of a signed in user for a particular app.\r\n *\r\n * A signed in user has access to two major pieces of information\r\n * about the user, the user's private key for that app and the location\r\n * of the user's gaia storage bucket for the app.\r\n *\r\n * A user can be signed in either directly through the interactive\r\n * sign in process or by directly providing the app private key.\r\n */\n\n\nvar UserSession =\n/*#__PURE__*/\nfunction () {\n  function UserSession(options) {\n    _classCallCheck(this, UserSession);\n\n    var runningInBrowser = true;\n\n    if (typeof window === 'undefined') {\n      logger_1.Logger.debug('UserSession: not running in browser');\n      runningInBrowser = false;\n    }\n\n    if (options && options.appConfig) {\n      this.appConfig = options.appConfig;\n    } else if (runningInBrowser) {\n      this.appConfig = new appConfig_1.AppConfig();\n    } else {\n      throw new errors_1.MissingParameterError('You need to specify options.appConfig');\n    }\n\n    if (options && options.sessionStore) {\n      this.store = options.sessionStore;\n    } else if (runningInBrowser) {\n      if (options) {\n        this.store = new sessionStore_1.LocalStorageStore(options.sessionOptions);\n      } else {\n        this.store = new sessionStore_1.LocalStorageStore();\n      }\n    } else if (options) {\n      this.store = new sessionStore_1.InstanceDataStore(options.sessionOptions);\n    } else {\n      this.store = new sessionStore_1.InstanceDataStore();\n    }\n  }\n  /* AUTHENTICATION */\n\n  /**\r\n   * Generates an authentication request and redirects the user to the Blockstack\r\n   * browser to approve the sign in request.\r\n   *\r\n   * Please note that this requires that the web browser properly handles the\r\n   * `blockstack:` URL protocol handler.\r\n   *\r\n   * Most applications should use this\r\n   * method for sign in unless they require more fine grained control over how the\r\n   * authentication request is generated. If your app falls into this category,\r\n   * use `generateAndStoreTransitKey`, `makeAuthRequest`,\r\n   * and `redirectToSignInWithAuthRequest` to build your own sign in process.\r\n   *\r\n   * @return {void}\r\n   */\n\n\n  _createClass(UserSession, [{\n    key: \"redirectToSignIn\",\n    value: function redirectToSignIn(redirectURI, manifestURI, scopes) {\n      var transitKey = this.generateAndStoreTransitKey();\n      var authRequest = this.makeAuthRequest(transitKey, redirectURI, manifestURI, scopes);\n      var authenticatorURL = this.appConfig && this.appConfig.authenticatorURL;\n      return authApp.redirectToSignInWithAuthRequest(authRequest, authenticatorURL);\n    }\n    /**\r\n     * Redirects the user to the Blockstack browser to approve the sign in request\r\n     * given.\r\n     *\r\n     * The user is redirected to the authenticator URL specified in the `AppConfig`\r\n     * if the `blockstack:` protocol handler is not detected.\r\n     * Please note that the protocol handler detection\r\n     * does not work on all browsers.\r\n     * @param  {String} authRequest - the authentication request generated by `makeAuthRequest`\r\n     * @return {void}\r\n     */\n\n  }, {\n    key: \"redirectToSignInWithAuthRequest\",\n    value: function redirectToSignInWithAuthRequest(authRequest, blockstackIDHost) {\n      authRequest = authRequest || this.makeAuthRequest();\n      var authenticatorURL = blockstackIDHost || this.appConfig && this.appConfig.authenticatorURL;\n      return authApp.redirectToSignInWithAuthRequest(authRequest, authenticatorURL);\n    }\n    /**\r\n     * Generates an authentication request that can be sent to the Blockstack\r\n     * browser for the user to approve sign in. This authentication request can\r\n     * then be used for sign in by passing it to the `redirectToSignInWithAuthRequest`\r\n     * method.\r\n     *\r\n     * *Note: This method should only be used if you want to roll your own authentication\r\n     * flow. Typically you'd use `redirectToSignIn` which takes care of this\r\n     * under the hood.*\r\n     * @param {string} transitKey - hex-encoded transit key\r\n     * @param {Number} expiresAt - the time at which this request is no longer valid\r\n     * @param {Object} extraParams - Any extra parameters you'd like to pass to the authenticator.\r\n     * Use this to pass options that aren't part of the Blockstack auth spec, but might be supported\r\n     * by special authenticators.\r\n     * @return {String} the authentication request\r\n     */\n\n  }, {\n    key: \"makeAuthRequest\",\n    value: function makeAuthRequest(transitKey, redirectURI, manifestURI, scopes, appDomain) {\n      var expiresAt = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : utils_1.nextHour().getTime();\n      var extraParams = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\n      var appConfig = this.appConfig;\n\n      if (!appConfig) {\n        throw new errors_1.InvalidStateError('Missing AppConfig');\n      }\n\n      transitKey = transitKey || this.generateAndStoreTransitKey();\n      redirectURI = redirectURI || appConfig.redirectURI();\n      manifestURI = manifestURI || appConfig.manifestURI();\n      scopes = scopes || appConfig.scopes;\n      appDomain = appDomain || appConfig.appDomain;\n      return authMessages.makeAuthRequest(transitKey, redirectURI, manifestURI, scopes, appDomain, expiresAt, extraParams);\n    }\n    /**\r\n     * Generates a ECDSA keypair to\r\n     * use as the ephemeral app transit private key\r\n     * and store in the session\r\n     * @return {String} the hex encoded private key\r\n     *\r\n     */\n\n  }, {\n    key: \"generateAndStoreTransitKey\",\n    value: function generateAndStoreTransitKey() {\n      var sessionData = this.store.getSessionData();\n      var transitKey = authMessages.generateTransitKey();\n      sessionData.transitKey = transitKey;\n      this.store.setSessionData(sessionData);\n      return transitKey;\n    }\n    /**\r\n     * Retrieve the authentication token from the URL query\r\n     * @return {String} the authentication token if it exists otherwise `null`\r\n     */\n\n  }, {\n    key: \"getAuthResponseToken\",\n    value: function getAuthResponseToken() {\n      return authApp.getAuthResponseToken();\n    }\n    /**\r\n     * Check if there is a authentication request that hasn't been handled.\r\n     * @return {Boolean} `true` if there is a pending sign in, otherwise `false`\r\n     */\n\n  }, {\n    key: \"isSignInPending\",\n    value: function isSignInPending() {\n      return authApp.isSignInPending();\n    }\n    /**\r\n     * Check if a user is currently signed in.\r\n     * @return {Boolean} `true` if the user is signed in, `false` if not.\r\n     */\n\n  }, {\n    key: \"isUserSignedIn\",\n    value: function isUserSignedIn() {\n      return !!this.store.getSessionData().userData;\n    }\n    /**\r\n     * Try to process any pending sign in request by returning a `Promise` that resolves\r\n     * to the user data object if the sign in succeeds.\r\n     *\r\n     * @param {String} authResponseToken - the signed authentication response token\r\n     * @return {Promise} that resolves to the user data object if successful and rejects\r\n     * if handling the sign in request fails or there was no pending sign in request.\r\n     */\n\n  }, {\n    key: \"handlePendingSignIn\",\n    value: function handlePendingSignIn() {\n      var authResponseToken = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getAuthResponseToken();\n      var transitKey = this.store.getSessionData().transitKey;\n      var nameLookupURL = this.store.getSessionData().coreNode;\n      return authApp.handlePendingSignIn(nameLookupURL, authResponseToken, transitKey, this);\n    }\n    /**\r\n     * Retrieves the user data object. The user's profile is stored in the key `profile`.\r\n     * @return {Object} User data object.\r\n     */\n\n  }, {\n    key: \"loadUserData\",\n    value: function loadUserData() {\n      var userData = this.store.getSessionData().userData;\n\n      if (!userData) {\n        throw new errors_1.InvalidStateError('No user data found. Did the user sign in?');\n      }\n\n      return userData;\n    }\n    /**\r\n     * Sign the user out and optionally redirect to given location.\r\n     * @param  redirectURL\r\n     * Location to redirect user to after sign out.\r\n     * Only used in environments with `window` available\r\n     */\n\n  }, {\n    key: \"signUserOut\",\n    value: function signUserOut(redirectURL) {\n      authApp.signUserOut(redirectURL, this);\n    } //\n    //\n    // /* PROFILES */\n    // extractProfile\n    // wrapProfileToken\n    // signProfileToken\n    // verifyProfileToken\n    // validateProofs\n    // lookupProfile\n\n    /* STORAGE */\n\n    /**\r\n     * Encrypts the data provided with the app public key.\r\n     * @param {String|Buffer} content - data to encrypt\r\n     * @param {Object} [options=null] - options object\r\n     * @param {String} options.publicKey - the hex string of the ECDSA public\r\n     * key to use for encryption. If not provided, will use user's appPrivateKey.\r\n     * @return {String} Stringified ciphertext object\r\n     */\n\n  }, {\n    key: \"encryptContent\",\n    value: function encryptContent(content, options) {\n      return storage.encryptContent(content, options, this);\n    }\n    /**\r\n     * Decrypts data encrypted with `encryptContent` with the\r\n     * transit private key.\r\n     * @param {String|Buffer} content - encrypted content.\r\n     * @param {Object} [options=null] - options object\r\n     * @param {String} options.privateKey - the hex string of the ECDSA private\r\n     * key to use for decryption. If not provided, will use user's appPrivateKey.\r\n     * @return {String|Buffer} decrypted content.\r\n     */\n\n  }, {\n    key: \"decryptContent\",\n    value: function decryptContent(content, options) {\n      return storage.decryptContent(content, options, this);\n    }\n    /**\r\n     * Stores the data provided in the app's data store to to the file specified.\r\n     * @param {String} path - the path to store the data in\r\n     * @param {String|Buffer} content - the data to store in the file\r\n     * @param {Object} [options=null] - options object\r\n     * @param {Boolean|String} [options.encrypt=true] - encrypt the data with the app private key\r\n     *                                                  or the provided public key\r\n     * @param {Boolean} [options.sign=false] - sign the data using ECDSA on SHA256 hashes with\r\n     *                                         the app private key\r\n     * @return {Promise} that resolves if the operation succeed and rejects\r\n     * if it failed\r\n     */\n\n  }, {\n    key: \"putFile\",\n    value: function putFile(path, content, options) {\n      return storage.putFile(path, content, options, this);\n    }\n    /**\r\n     * Retrieves the specified file from the app's data store.\r\n     * @param {String} path - the path to the file to read\r\n     * @param {Object} [options=null] - options object\r\n     * @param {Boolean} [options.decrypt=true] - try to decrypt the data with the app private key\r\n     * @param {String} options.username - the Blockstack ID to lookup for multi-player storage\r\n     * @param {Boolean} options.verify - Whether the content should be verified, only to be used\r\n     * when `putFile` was set to `sign = true`\r\n     * @param {String} options.app - the app to lookup for multi-player storage -\r\n     * defaults to current origin\r\n     * @param {String} [options.zoneFileLookupURL=null] - The URL\r\n     * to use for zonefile lookup. If falsey, this will use the\r\n     * blockstack.js's getNameInfo function instead.\r\n     * @returns {Promise} that resolves to the raw data in the file\r\n     * or rejects with an error\r\n     */\n\n  }, {\n    key: \"getFile\",\n    value: function getFile(path, options) {\n      return storage.getFile(path, options, this);\n    }\n    /**\r\n     * Get the URL for reading a file from an app's data store.\r\n     * @param {String} path - the path to the file to read\r\n     * @param {Object} [options=null] - options object\r\n     * @param {String} options.username - the Blockstack ID to lookup for multi-player storage\r\n     * @param {String} options.app - the app to lookup for multi-player storage -\r\n     * defaults to current origin\r\n     * @param {String} [options.zoneFileLookupURL=null] - The URL\r\n     * to use for zonefile lookup. If falsey, this will use the\r\n     * blockstack.js's getNameInfo function instead.\r\n     * @returns {Promise<string>} that resolves to the URL or rejects with an error\r\n     */\n\n  }, {\n    key: \"getFileUrl\",\n    value: function getFileUrl(path, options) {\n      return storage.getFileUrl(path, options, this);\n    }\n    /**\r\n     * List the set of files in this application's Gaia storage bucket.\r\n     * @param {function} callback - a callback to invoke on each named file that\r\n     * returns `true` to continue the listing operation or `false` to end it\r\n     * @return {Promise} that resolves to the number of files listed\r\n     */\n\n  }, {\n    key: \"listFiles\",\n    value: function listFiles(callback) {\n      return storage.listFiles(callback, this);\n    }\n    /**\r\n     * Deletes the specified file from the app's data store. Currently not implemented.\r\n     * @param {String} path - the path to the file to delete\r\n     * @returns {Promise} that resolves when the file has been removed\r\n     * or rejects with an error\r\n     */\n\n  }, {\n    key: \"deleteFile\",\n    value: function deleteFile(path) {\n      Promise.reject(new Error(\"Delete of \".concat(path, \" not supported by gaia hubs\")));\n    }\n  }, {\n    key: \"getOrSetLocalGaiaHubConnection\",\n    value: function getOrSetLocalGaiaHubConnection() {\n      var sessionData = this.store.getSessionData();\n      var userData = sessionData.userData;\n\n      if (!userData) {\n        throw new errors_1.InvalidStateError('Missing userData');\n      }\n\n      var hubConfig = userData.gaiaHubConfig;\n\n      if (hubConfig) {\n        return Promise.resolve(hubConfig);\n      }\n\n      return this.setLocalGaiaHubConnection();\n    }\n    /**\r\n     * These two functions are app-specific connections to gaia hub,\r\n     *   they read the user data object for information on setting up\r\n     *   a hub connection, and store the hub config to localstorage\r\n     * @private\r\n     * @returns {Promise} that resolves to the new gaia hub connection\r\n     */\n\n  }, {\n    key: \"setLocalGaiaHubConnection\",\n    value: function setLocalGaiaHubConnection() {\n      return __awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var userData, gaiaConfig, sessionData;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                userData = this.loadUserData();\n\n                if (userData) {\n                  _context.next = 3;\n                  break;\n                }\n\n                throw new errors_1.InvalidStateError('Missing userData');\n\n              case 3:\n                if (!userData.hubUrl) {\n                  userData.hubUrl = authConstants_1.BLOCKSTACK_DEFAULT_GAIA_HUB_URL;\n                }\n\n                _context.next = 6;\n                return hub_1.connectToGaiaHub(userData.hubUrl, userData.appPrivateKey, userData.associationToken);\n\n              case 6:\n                gaiaConfig = _context.sent;\n                userData.gaiaHubConfig = gaiaConfig;\n                sessionData = this.store.getSessionData();\n                sessionData.userData.gaiaHubConfig = gaiaConfig;\n                this.store.setSessionData(sessionData);\n                return _context.abrupt(\"return\", gaiaConfig);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }]);\n\n  return UserSession;\n}();\n\nexports.UserSession = UserSession;","map":null,"metadata":{},"sourceType":"script"}