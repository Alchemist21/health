{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Me\\\\Desktop\\\\hackfest2019\\\\healthr\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bitcoinjs_lib_1 = __importDefault(require(\"bitcoinjs-lib\"));\n\nvar crypto_1 = __importDefault(require(\"crypto\")); // @ts-ignore: Could not find a declaration file for module\n\n\nvar jsontokens_1 = require(\"jsontokens\");\n\nvar utils_1 = require(\"../utils\");\n\nvar keys_1 = require(\"../keys\");\n\nvar logger_1 = require(\"../logger\");\n\nexports.BLOCKSTACK_GAIA_HUB_LABEL = 'blockstack-gaia-hub-config';\n\nfunction uploadToGaiaHub(filename, contents, hubConfig) {\n  var contentType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'application/octet-stream';\n  return __awaiter(this, void 0, void 0,\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var response, responseText, responseJSON;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            logger_1.Logger.debug(\"uploadToGaiaHub: uploading \".concat(filename, \" to \").concat(hubConfig.server));\n            _context.next = 3;\n            return fetch(\"\".concat(hubConfig.server, \"/store/\").concat(hubConfig.address, \"/\").concat(filename), {\n              method: 'POST',\n              headers: {\n                'Content-Type': contentType,\n                Authorization: \"bearer \".concat(hubConfig.token)\n              },\n              body: contents\n            });\n\n          case 3:\n            response = _context.sent;\n\n            if (response.ok) {\n              _context.next = 6;\n              break;\n            }\n\n            throw new Error('Error when uploading to Gaia hub');\n\n          case 6:\n            _context.next = 8;\n            return response.text();\n\n          case 8:\n            responseText = _context.sent;\n            responseJSON = JSON.parse(responseText);\n            return _context.abrupt(\"return\", responseJSON.publicURL);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\n\nexports.uploadToGaiaHub = uploadToGaiaHub;\n\nfunction getFullReadUrl(filename, hubConfig) {\n  return Promise.resolve(\"\".concat(hubConfig.url_prefix).concat(hubConfig.address, \"/\").concat(filename));\n}\n\nexports.getFullReadUrl = getFullReadUrl;\n\nfunction makeLegacyAuthToken(challengeText, signerKeyHex) {\n  // only sign specific legacy auth challenges.\n  var parsedChallenge;\n\n  try {\n    parsedChallenge = JSON.parse(challengeText);\n  } catch (err) {\n    throw new Error('Failed in parsing legacy challenge text from the gaia hub.');\n  }\n\n  if (parsedChallenge[0] === 'gaiahub' && parsedChallenge[3] === 'blockstack_storage_please_sign') {\n    var signer = utils_1.hexStringToECPair(signerKeyHex + (signerKeyHex.length === 64 ? '01' : ''));\n    var digest = bitcoinjs_lib_1.default.crypto.sha256(Buffer.from(challengeText));\n    var signatureBuffer = signer.sign(digest);\n    var signatureWithHash = bitcoinjs_lib_1.default.script.signature.encode(signatureBuffer, bitcoinjs_lib_1.default.Transaction.SIGHASH_NONE); // We only want the DER encoding so remove the sighash version byte at the end.\n    // See: https://github.com/bitcoinjs/bitcoinjs-lib/issues/1241#issuecomment-428062912\n\n    var signature = signatureWithHash.toString('hex').slice(0, -2);\n    var publickey = keys_1.getPublicKeyFromPrivate(signerKeyHex);\n    var token = Buffer.from(JSON.stringify({\n      publickey: publickey,\n      signature: signature\n    })).toString('base64');\n    return token;\n  } else {\n    throw new Error('Failed to connect to legacy gaia hub. If you operate this hub, please update.');\n  }\n}\n\nfunction makeV1GaiaAuthToken(hubInfo, signerKeyHex, hubUrl, associationToken) {\n  var challengeText = hubInfo.challenge_text;\n  var handlesV1Auth = hubInfo.latest_auth_version && parseInt(hubInfo.latest_auth_version.slice(1), 10) >= 1;\n  var iss = keys_1.getPublicKeyFromPrivate(signerKeyHex);\n\n  if (!handlesV1Auth) {\n    return makeLegacyAuthToken(challengeText, signerKeyHex);\n  }\n\n  var salt = crypto_1.default.randomBytes(16).toString('hex');\n  var payload = {\n    gaiaChallenge: challengeText,\n    hubUrl: hubUrl,\n    iss: iss,\n    salt: salt,\n    associationToken: associationToken\n  };\n  var token = new jsontokens_1.TokenSigner('ES256K', signerKeyHex).sign(payload);\n  return \"v1:\".concat(token);\n}\n\nfunction connectToGaiaHub(gaiaHubUrl, challengeSignerHex, associationToken) {\n  return __awaiter(this, void 0, void 0,\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    var response, hubInfo, readURL, token, address;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            logger_1.Logger.debug(\"connectToGaiaHub: \".concat(gaiaHubUrl, \"/hub_info\"));\n            _context2.next = 3;\n            return fetch(\"\".concat(gaiaHubUrl, \"/hub_info\"));\n\n          case 3:\n            response = _context2.sent;\n            _context2.next = 6;\n            return response.json();\n\n          case 6:\n            hubInfo = _context2.sent;\n            readURL = hubInfo.read_url_prefix;\n            token = makeV1GaiaAuthToken(hubInfo, challengeSignerHex, gaiaHubUrl, associationToken);\n            address = utils_1.ecPairToAddress(utils_1.hexStringToECPair(challengeSignerHex + (challengeSignerHex.length === 64 ? '01' : '')));\n            return _context2.abrupt(\"return\", {\n              url_prefix: readURL,\n              address: address,\n              token: token,\n              server: gaiaHubUrl\n            });\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n}\n\nexports.connectToGaiaHub = connectToGaiaHub;\n\nfunction getBucketUrl(gaiaHubUrl, appPrivateKey) {\n  return __awaiter(this, void 0, void 0,\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3() {\n    var challengeSigner, response, responseText, responseJSON, readURL, address, bucketUrl;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            challengeSigner = bitcoinjs_lib_1.default.ECPair.fromPrivateKey(Buffer.from(appPrivateKey, 'hex'));\n            _context3.next = 3;\n            return fetch(\"\".concat(gaiaHubUrl, \"/hub_info\"));\n\n          case 3:\n            response = _context3.sent;\n            _context3.next = 6;\n            return response.text();\n\n          case 6:\n            responseText = _context3.sent;\n            responseJSON = JSON.parse(responseText);\n            readURL = responseJSON.read_url_prefix;\n            address = utils_1.ecPairToAddress(challengeSigner);\n            bucketUrl = \"\".concat(readURL).concat(address, \"/\");\n            return _context3.abrupt(\"return\", bucketUrl);\n\n          case 12:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n}\n\nexports.getBucketUrl = getBucketUrl;","map":null,"metadata":{},"sourceType":"script"}