{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar errors_1 = require(\"./errors\");\n\nfunction makeDIDFromAddress(address) {\n  return \"did:btc-addr:\".concat(address);\n}\n\nexports.makeDIDFromAddress = makeDIDFromAddress;\n\nfunction makeDIDFromPublicKey(publicKey) {\n  return \"did:ecdsa-pub:\".concat(publicKey);\n}\n\nexports.makeDIDFromPublicKey = makeDIDFromPublicKey;\n\nfunction getDIDType(decentralizedID) {\n  var didParts = decentralizedID.split(':');\n\n  if (didParts.length !== 3) {\n    throw new errors_1.InvalidDIDError('Decentralized IDs must have 3 parts');\n  }\n\n  if (didParts[0].toLowerCase() !== 'did') {\n    throw new errors_1.InvalidDIDError('Decentralized IDs must start with \"did\"');\n  }\n\n  return didParts[1].toLowerCase();\n}\n\nexports.getDIDType = getDIDType;\n\nfunction getAddressFromDID(decentralizedID) {\n  var didType = getDIDType(decentralizedID);\n\n  if (didType === 'btc-addr') {\n    return decentralizedID.split(':')[2];\n  } else {\n    return null;\n  }\n}\n\nexports.getAddressFromDID = getAddressFromDID;\n/*\r\nexport function getPublicKeyOrAddressFromDID(decentralizedID) {\r\n  const didParts = decentralizedID.split(':')\r\n\r\n  if (didParts.length !== 3) {\r\n    throw new InvalidDIDError('Decentralized IDs must have 3 parts')\r\n  }\r\n\r\n  if (didParts[0].toLowerCase() !== 'did') {\r\n    throw new InvalidDIDError('Decentralized IDs must start with \"did\"')\r\n  }\r\n\r\n  if (didParts[1].toLowerCase() === 'ecdsa-pub') {\r\n    return didParts[2]\r\n  } else if (didParts[1].toLowerCase() === 'btc-addr') {\r\n    return didParts[2]\r\n  } else {\r\n    throw new InvalidDIDError('Decentralized ID format not supported')\r\n  }\r\n}\r\n*/","map":null,"metadata":{},"sourceType":"script"}